diff --git a/node_modules/expo-notifications/android/build.gradle b/node_modules/expo-notifications/android/build.gradle
index 97bf4f4..8471d96 100644
--- a/node_modules/expo-notifications/android/build.gradle
+++ b/node_modules/expo-notifications/android/build.gradle
@@ -118,6 +118,8 @@ dependencies {
   api 'com.google.firebase:firebase-messaging:22.0.0'

   api 'me.leolin:ShortcutBadger:1.1.22@aar'
+  implementation project(':expo-background-notification-handler')
+  implementation project(':expo-background-notification-handler')

   if (project.findProject(':expo-modules-test-core')) {
     testImplementation project(':expo-modules-test-core')
diff --git a/node_modules/expo-notifications/android/src/main/java/expo/modules/notifications/service/delegates/FirebaseMessagingDelegate.kt b/node_modules/expo-notifications/android/src/main/java/expo/modules/notifications/service/delegates/FirebaseMessagingDelegate.kt
index 55b3a8d..3b872b5 100644
--- a/node_modules/expo-notifications/android/src/main/java/expo/modules/notifications/service/delegates/FirebaseMessagingDelegate.kt
+++ b/node_modules/expo-notifications/android/src/main/java/expo/modules/notifications/service/delegates/FirebaseMessagingDelegate.kt
@@ -12,6 +12,8 @@ import expo.modules.notifications.notifications.model.triggers.FirebaseNotificat
 import expo.modules.notifications.service.NotificationsService
 import expo.modules.notifications.service.interfaces.FirebaseMessagingDelegate
 import expo.modules.notifications.tokens.interfaces.FirebaseTokenListener
+import expo.modules.backgroundnotificationhandler.BackgroundNotificationHandler
+import expo.modules.backgroundnotificationhandler.ExpoBackgroundNotificationHandlerModule
 import org.json.JSONObject
 import java.lang.ref.WeakReference
 import java.util.*
@@ -89,12 +91,20 @@ open class FirebaseMessagingDelegate(protected val context: Context) : FirebaseM
   fun getBackgroundTasks() = sBackgroundTaskConsumerReferences.values.mapNotNull { it.get() }

   override fun onMessageReceived(remoteMessage: RemoteMessage) {
-    NotificationsService.receive(context, createNotification(remoteMessage))
-    getBackgroundTasks().forEach {
-      it.scheduleJob(RemoteMessageSerializer.toBundle(remoteMessage))
+    if (!ExpoBackgroundNotificationHandlerModule.isForegrounded) {
+      BackgroundNotificationHandler(this).handleMessage(remoteMessage)
+    } else {
+      showMessage(remoteMessage)
+      getBackgroundTasks().forEach {
+        it.scheduleJob(RemoteMessageSerializer.toBundle(remoteMessage))
+      }
     }
   }

+  fun showMessage(remoteMessage: RemoteMessage) {
+    NotificationsService.receive(context, createNotification(remoteMessage))
+  }
+
   protected fun createNotification(remoteMessage: RemoteMessage): Notification {
     val identifier = getNotificationIdentifier(remoteMessage)
     val payload = JSONObject(remoteMessage.data as Map<*, *>)
